<!DOCTYPE document SYSTEM "rml.dtd"> 
<document filename="fund_report.pdf" > 

{{script}}
import os, sys
from project.fundreport.rml_utils import rml, esc, negRedTd

barChartPadding=42
{{endscript}}

<!-- 
==========
docinit section is for registering fonts and colors 
==========
-->

<docinit>

<!--
==========

Register your own fonts here using this syntax:
TODO registerFontFamily.

	<registerTTFont faceName="" fileName=""/>

===========
-->

	<color id="RL_BLUE" CMYK="[0.97, 0.81, 0.04, 0]"/>
	<color id="BLACK_TEXT" CMYK="[0, 0.1, 0.14, 0.85]"/>
	<color id="GRAY_TEXT" CMYK="[0, 0, 0, 0.65]"/>
</docinit>

<template pageSize="(842, 595)" leftMargin="72" showBoundary="0">

	<pageTemplate id="cover">
		<pageGraphics>
			<image file="{{RML_DIR}}/logo.png" x="520" y="500" width="250" preserveAspectRatio="1"/>

			<setFontSize size="24"/>
			<fill color="BLACK_TEXT"/>
			<drawString x="72" y="420">ReportLab Investment Management</drawString>			  

			<setFontSize size="18"/>
			<fill color="GRAY_TEXT"/>
			<drawString x="72" y="395">Fund factsheet: {{fund.name}}</drawString>	

			<fill color="RL_BLUE"/>
			<rect x="0" y="385" height="3" width="842" stroke="0" fill="1"/>

		</pageGraphics>
		<frame id="1" x1="72" y1="72" width="200" height="200"/>
	</pageTemplate>


	<pageTemplate id="body">
		<pageGraphics>
			<image file="{{RML_DIR}}/logo_gray.png" x="657" y="520" width="150" preserveAspectRatio="1"/>
			<fill color="RL_BLUE"/>
			<rect x="0" y="520" height="3" width="842" stroke="0" fill="1"/>

			<fill color="GRAY_TEXT"/>
			<drawCenteredString x="421" y="35"><pageNumber/></drawCenteredString>
			<drawString x="35" y="35">ReportLab Investment Management</drawString>
			<drawRightString x="807" y="35">Private and Confidential</drawRightString>

			<!--
			==========
			The <place> tag below will let you set new templates
			and pass in a Title attribute, see the story below.
			#AR expand
			==========
			-->

			<place x="35" y="528" width="500" height="30"><para style="h1"><getName id="Title" default=""/></para></place>
		</pageGraphics>
				<frame id="body" x1="35" y1="72" width="772" height="428"/>
	</pageTemplate>

	<pageTemplate id="blank">
		<frame id="1" x1="0" y1="0" width="842" height="595" />
	</pageTemplate>

</template>

<!--
==========

The style sheet contains paragraph and table styles

==========
-->

<stylesheet>

	<paraStyle name="h1"
		fontSize="20"
		textColor="RL_BLUE"
		leading="17"
		spaceBefore = "27"
		spaceAfter = "13"
		/>
		
		<paraStyle name="table_headings"
		fontName="Helvetica-Bold"
		fontSize="7"
		textColor="white"
		/>

	<paraStyle name="body"
		fontName="Helvetica"
		fontSize="8.4"
		textColor="BLACK_TEXT"
		leading="12"
		spaceBefore = "8"
		alignment="JUSTIFY"
		/>

	
	<blockTableStyle id="basic">
		<blockAlignment value="center"/>
		<blockFont name="Helvetica" size="8.4" start="0,0" stop="-1,-1"/>
		<blockValign value="middle" />
		<lineStyle kind="LINEABOVE" colorName="black" start="0,0" stop="-1,0"/>
		<lineStyle kind="LINEBELOW" colorName="black" start="0,-1" stop="-1,-1"/>
		<blockBackground colorName="black" start="0,0" stop="-1,0"/>
		<blockTextColor colorName="white" start="0,0" stop="-1,0"/>
		<blockBackground colorsByRow="None;#DCE6F2" start="0,1" stop="-1,-1"/>
	</blockTableStyle>

	<blockTableStyle id="container">
		<blockAlignment value="center"/>
		<blockValign value="top" />
		<blockLeftPadding length="0" />
		<blockRightPadding length="0" />
		<blockBottomPadding length="0" />
		<blockTopPadding length="0" />
		<blockTopPadding length="{{barChartPadding}}" start="0,0" stop="0,0"/>
	</blockTableStyle>

	<blockTableStyle id="small_text" parent="basic">
		<blockFont name="Helvetica" size="7" start="0,0" stop="-1,-1"/>
	</blockTableStyle>
	
	<blockTableStyle id="deltas_header">
		<blockAlignment value="right"/>
		<blockFont name="Helvetica-Bold" size="8" start="0,0" stop="-1,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="0,0" stop="0,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="0,0" stop="3,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="4,0" stop="6,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="7,0" stop="9,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="10,0" stop="12,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="13,0" stop="15,-1"/>
		<blockBackground colorsByRow="black" start="0,-1" stop="-1,-1"/>
		<blockTextColor colorName="white" start="0,0" stop="-1,-1"/>
	</blockTableStyle>

	<blockTableStyle id="deltas_part">
		<blockAlignment value="decimal"/>
		<blockAlignment value="center" start="0,0" stop="0,-1"/>
		<blockFont name="Helvetica" size="6" start="0,0" stop="-1,-1"/>
		<blockValign value="middle" />
		<lineStyle kind="OUTLINE" colorName="black" start="0,0" stop="0,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="0,0" stop="3,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="4,0" stop="6,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="7,0" stop="9,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="10,0" stop="12,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="13,0" stop="15,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="0,-1" stop="-1,-1"/>
		<blockTextColor colorName="black" start="0,0" stop="-1,-1"/>
		 <blockFont name="Helvetica-Bold" size="6" start="0,-1" stop="-1,-1"/>
		<blockBackground colorsByRow="silver" start="0,-1" stop="-1,-1"/>
	</blockTableStyle>
	<blockTableStyle id="deltas_footer">
		<blockAlignment value="decimal"/>
		<blockAlignment value="center" start="0,0" stop="0,-1"/>
		<blockFont name="Helvetica-Bold" size="6" start="0,0" stop="-1,-1"/>
		<blockValign value="middle" />
		<lineStyle kind="OUTLINE" colorName="black" start="0,0" stop="0,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="0,0" stop="3,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="4,0" stop="6,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="7,0" stop="9,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="10,0" stop="12,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="13,0" stop="15,-1"/>
		<lineStyle kind="OUTLINE" colorName="black" start="0,-1" stop="-1,-1"/>
		<blockTextColor colorName="black" start="0,0" stop="-1,-1"/>
		<blockBackground colorsByRow="gray" start="0,0" stop="-1,-1"/>
	</blockTableStyle>
</stylesheet>

<!-- 
==========

The story contains all flowable content

==========
-->

<story>
<setNextTemplate name="body"/><name id="Title" value="Market performance"/>
<nextPage/>
<blockTable style="basic" colWidths="122,45,45,45,45,45,45,45,45,45,45,45,45,45,65">
	<tr>
		<td></td>
		<td>Jan</td>
		<td>Feb</td>
		<td>Mar</td>
		<td>Apr</td>
		<td>May</td>
		<td>Jun</td>
		<td>Jul</td>
		<td>Aug</td>
		<td>Sep</td>
		<td>Oct</td>
		<td>Nov</td>
		<td>Dec</td>
		<td>YTD</td>
		<td></td>
	</tr>

<!--
==========

Dummy data entered for returns in the following table row,
using the function negRedTd from rml_utils. This function
accepts a number and an optional format parameter. If set to
'percent', it will display percentages to 2 decimal places, 
otherwise, it will show whole numbers with a ',' for the 
thousands separator.

AR - give example of what it creates, makes explanation clearer...

Negative numbers are given a different colour; red by default,
but any colour may be given as an argument.

==========
-->

	<tr>
		<td>{{fund.name}}</td>
		{{negRedTd(7.61, format='percent')}}
		{{negRedTd(5.62, format='percent')}}
		{{negRedTd(2.31, format='percent')}}
		{{negRedTd(-6.62, format='percent')}}
		{{negRedTd(-1.38, format='percent')}}
		{{negRedTd(-6.47, format='percent')}}
		{{negRedTd(4.62, format='percent')}}
		{{negRedTd(0.91, format='percent')}}
		{{negRedTd(5.75, format='percent')}}
		{{negRedTd(-1.12, format='percent')}}
		{{negRedTd(-7.62, format='percent')}}
		{{negRedTd(3.42, format='percent')}}
		{{negRedTd(15.41, format='percent')}}
	</tr>
</blockTable>

<!--
==========

Below is an instance of a dynamically drawn chart. The <drawing>
tag is used to import a particular chart (function) from a
python module (module) as created with the drawing editor. See
notes in 00README for more on the drawing editor.

AR:  explain drawing editor.

Any parameters of this chart may be dynamically controlled at
the time of PDF generation; in this case, we are replacing the
data attribute with our own line chart data, assembled
previously and passed to this template.

==========
-->

	<drawing module="project.fundreport.charts.monthperf12mo" function="perfChart">
		<!--pass in dynamic data as a python list expression with preppy -->
		<param name="chart.data">{{line_chart_data}}</param>
	</drawing>

<name id="Title" value="Market performance"/>
	<nextPage/>
	<para style="body" spaceAfter="10">{{fund.market_summary}}</para>

<!--
==========

Try two - using sparklines within the table
==========
-->

{{script}}
portfolioBarData=[[] for i in range(3)]
portfolioTotals = 5*[0]
rowHeight = 12
n = len(live_themes)

drawingHeight = rowHeight*(n+1)+barChartPadding
chartHeight = rowHeight*n

import random
#we want to build something like a chart, with little bars
#in each cell.	Need to work out the maximum and minimum
#of several columns for scaling our widgets.
chart_width=130
chart_highest = 0.0
chart_lowest = 0.0
for t in live_themes:
	for num in (t.position.LTD, t.position.SL, t.target_PL):
		if num > chart_highest:
			chart_highest = num
		if num < chart_lowest:
			chart_lowest = num
chart_range = 1.0 * chart_highest - chart_lowest
chart_scale_factor = chart_width / chart_range
xZERO= chart_scale_factor * (0 - chart_lowest)	#how many points across is zero on the chart?
{{endscript}}

<keepInFrame frame="body" onOverflow="shrink">
<blockTable align="LEFT" style="small_text" rowHeights="{{','.join((n+3)*[str(rowHeight)])}}" colWidths="117,40,40,40,40,40,40,40,40,40,140,117">
	<tr>
		<td>Trade</td>
		<td>Region</td>
		<td>Country</td>
		<td>Trade Date</td>
		<td>Asset Class</td>
		<td>Profit</td>
		<td>Limit</td>
		<td>Stop loss</td>
		<td>Value at risk</td>
		<td>cVaR</td>
		<td>Profit/Loss related to limits</td>
		<td>Trade</td>
	</tr>
	
	<!--to get a chart header in, we'll have an empty row-->
	<tr>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
		<td>
	 <!--now we put an actual chart in the table cell -->
			<drawing module="reportlab.graphics.shapes" function="Drawing">
				<param name="height">8</param>
				<param name="width">{{chart_width}}</param>
				<!--draw a bar chart showing the zero, stop loss and limit -->
				<widget module="reportlab.graphics.charts.barcharts" function="HorizontalBarChart" name="chart"/> 
				<!--need at least a data point, so we'll have two series, one for the max and one for the min
				value.	In this case we know the data tends to be in millions and we don't want a load of
				zeros, so we'll divide by 1m; we could use a custom formatting function -->
				<param name="chart.data">[[{{1e-06 * chart_lowest}},{{1e-06 * chart_highest}}]]</param>
				<param name="chart.x">0</param>
				<param name="chart.y">7</param>
				<param name="chart.width">{{chart_width}}</param>
				<param name="chart.height">20</param>
				<param name="chart.valueAxis.valueMin">{{1e-06 * chart_lowest}}</param>
				<param name="chart.valueAxis.valueMax">{{1e-06 * chart_highest}}</param>				
				<param name="chart.valueAxis.minimumTickSpacing">5</param>				  
				<!--<param name="chart.valueAxis.labels.angle">90</param>-->
				
				<!--put labels to right of tickmark ? -->
				<param name="chart.valueAxis.labels.dx">2</param>
				<param name="chart.valueAxis.labels.dy">-4</param>
				<param name="chart.valueAxis.labels.boxAnchor">w</param>
				<param name="chart.valueAxis.labels.fontName">Helvetica</param>				   
				<param name="chart.valueAxis.labels.fontSize">6</param>				   
				<param name="chart.categoryAxis.visible">False</param>				  
				<param name="chart.valueAxis.labelTextFormat">%0.1fm</param>
				
				<!--make the bars and axis disappear and consume almost zero space -->
				<param name="chart.barWidth">0</param>				  
				<param name="chart.barSpacing">0</param>				
				<param name="chart.bars[0].fillColor">Color(1,1,1)</param>				  
				<param name="chart.bars[0].strokeColor">None</param>				
			</drawing>
		
		</td>
		<td></td>
	</tr>
	
	
	{{for t in live_themes}}
	<tr>
		{{script}}
		
		xPROFIT = xZERO + chart_scale_factor * t.position.LTD
		xLIMIT = xZERO + chart_scale_factor * t.target_PL
		xSTOPLOSS = xZERO + chart_scale_factor * t.position.SL
		
		{{endscript}}
		<td align="LEFT">{{t.name}}</td>
		<td>{{t.region}}</td>
		<td>{{t.country}}</td>
		<td>{{t.live_rationale.date}}</td>
		<td>{{t.asset_class}}</td>
		{{script}}
		tds=[].append
		for i,v in enumerate((t.position.LTD,t.target_PL,t.position.SL,t.position.var,t.position.cvar)):
			portfolioTotals[i] += v
			tds(negRedTd(v))
		{{endscript}}{{''.join(tds.__self__)}}
		<td>
			<drawing module="reportlab.graphics.shapes" function="Drawing">
				<param name="height">8</param>
				<param name="width">{{chart_width}}</param>
				<!--draw vertical lines to show the zero, stop-loss and limit -->
				<widget module="reportlab.graphics.shapes" function="Rect" name="ZERO" initargs="{{xZERO}},1,0,6"/>

				<!--configure a shadedrect widget-->
				<widget module="reportlab.graphics.widgets.grids" function="ShadedRect" name="PROFIT"/>
				<param name="PROFIT.x">{{xZERO}}</param>
				<param name="PROFIT.y">2</param>
				<param name="PROFIT.width">{{xPROFIT - xZERO}}</param>
				<param name="PROFIT.height">4</param>
				<param name="PROFIT.numShades">100</param>
				<param name="PROFIT.strokeColor">None</param>
				{{if t.position.LTD > 0}}
					<param name="PROFIT.fillColorEnd">Color(0,0,1)</param>
					<param name="PROFIT.fillColorStart">Color(0.75,0.75,1)</param>
				{{else}}
					<param name="PROFIT.fillColorEnd">Color(1,0,0)</param>
					<param name="PROFIT.fillColorStart">Color(1,0.75,0.75)</param>
				{{endif}}

				<!--draw our limits AFTER the profit, in case it has exceeded, and one point higher/lower 
				- we want to see the line over it -->
				<widget module="reportlab.graphics.shapes" function="Rect" name="STOPLOSS" initargs="{{xSTOPLOSS}},0,0,8"/>
				<widget module="reportlab.graphics.shapes" function="Rect" name="LIMIT" initargs="{{xLIMIT}},0,0,8"/>

			</drawing>
		
		
		</td>
		<td align="RIGHT">{{t.name}}</td>
	</tr>
	{{endfor}}
	<tr>
		<td>Total</td>
		{{4*'<td/>'}}{{''.join([negRedTd(v) for v in portfolioTotals])}}
	</tr>
</blockTable>

</keepInFrame>




<name id="deltas" value="Portfolio Deltas"/>
<nextPage/>
<para style="body">This page shows a few tips when constructing large and complex tables.  At this
point people often start thinking about "nested tables".  The data for this page comes ultimately
from an Excel sheet, which we have saved as tab-delimited text, to avoid the overhead of modelling
complex data in a database and then querying and reformatting as table cells.  </para>
<ul>
	<li><para style="body" spaceBefore="0">Create one table for the header, and one for any final footer</para></li>
	<li><para style="body" spaceBefore="0">Explicitly set the widths of the columns, and leave no space between, so they all appear to be one table</para></li>
	<li><para style="body" spaceBefore="0">Create a table for each group of rows, which has special formatting on the LAST row (bold, line above and line below in this case).</para></li>
</ul>
<blockTable style="deltas_header" colWidths="10%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%">
	<tr>
		<td></td>
		<td>National 
(USD Equiv)</td>
		<td>Gamma</td>
		<td>Vega</td>
		<td>Delta</td>
		<td>Gamma</td>
		<td>Vega</td>
		<td>Delta</td>
		<td>Gamma</td>
		<td>Vega</td>
		<td>Delta</td>
		<td>Gamma</td>
		<td>Vega</td>
		<td>Delta</td>
		<td>Gamma</td>
		<td>Vega</td>
	</tr>
</blockTable>

<blockTable style="deltas_part" colWidths="10%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%">
	<!--Instead of tr/td, you have the option to use our bulkData tag and include delimited data within the RML.
	
	When reading from externally prepared files, this can make life much easier, and it saves you from parsing
	files and then rewriting it all as <tr><td>.  You can get the data in with a Python one-liner like this:
	
	open("somefile.txt").read()
	
	or write a slightly cleverer function to extract all lines between text markers.
	
	In this case, we want to preserve commas within currency values, so we are using tab-delimited data. The data
	needs to have the same 16 columns we expect.
	
	Thw downside is that it's hard to apply cell specific formatting like colouring numbers red, as there are no
	<td> tags for you to style.
	-->
	<bulkData fieldDelim='\t'><![CDATA[
ARS	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
BRL	44,083,597	972,119	11,069	47,758,427	-2,979,404	-42,815	45,461,208	1,165,039	12,665	42,978,259	692,945	8,416	40,694,890	99,244	1,360
CLP	-24,929,368	0	0	-24,929,368	0	0	-24,929,368	0	0	-24,929,368	0	0	-24,929,368	0	0
COP	-208,762	398,577	646	-10,929,545	-4,840,969	-17,967	1,071,013	2,426,712	1,011	-328,919	87,203	1,051	-737,816	34,141	177
MXN	-16,048,880	948,600	43,509	26,773,686	12,865,649	234,532	-13,287,953	4,035,024	89,417	-15,282,063	-2,690,554	3,534	5,023,584	-4,830,551	-42,843
LATAM TOTAL	2,896,588	2,319,296	55,223	38,673,201	5,045,276	173,750	8,314,899	7,626,775	103,093	2,437,909	-1,910,405	13,000	20,051,290	-4,697,165	-41,306
	]]></bulkData>
</blockTable>


<blockTable style="deltas_part" colWidths="10%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%">
	<!--Approach number two uses tr/td and Python, to test for negative numbers
	and generate differently coloured cells.  At some point we can probably add a
	conditional formatting feature to RML tables for this.
	-->
	{{script}}
	import os
	filename = os.path.join(os.path.dirname(RML_DIR), 'fixtures', 'example_deltas.txt')
	{{endscript}}
	{{for line in open(filename).readlines()[7:14]}}
	<tr>
		{{for field in line.split('\t')}}
			{{if field.startswith('-')}}
			<td fontColor="red">{{field}}</td>
			{{else}}
			<td>{{field}}</td>
			{{endif}}
		{{endfor}}
	</tr>
	{{endfor}}
</blockTable>


<blockTable style="deltas_part" colWidths="10%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%">
	{{for line in open(filename).readlines()[14:25]}}
	<tr>
		{{for field in line.split('\t')}}
			{{if field.startswith('-')}}
			<td fontColor="red">{{field}}</td>
			{{else}}
			<td>{{field}}</td>
			{{endif}}
		{{endfor}}
	</tr>
	{{endfor}}
</blockTable>
<blockTable style="deltas_footer" colWidths="10%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%,6%">
	{{for line in open(filename).readlines()[25:26]}}
	<tr>
		{{for field in line.split('\t')}}
			{{if field.startswith('-')}}
			<td fontColor="red">{{field}}</td>
			{{else}}
			<td>{{field}}</td>
			{{endif}}
		{{endfor}}
	</tr>
	{{endfor}}
</blockTable>



<name id="Title" value="Live Trades"/>
<nextPage/>
<blockTable style="basic" colWidths="125,30,450,55">
	<tr>
		<td>Theme</td>
		<td>Action</td>
		<td>Rationale</td>
		<td>Date</td>
	</tr>
	{{for t in live_themes}}
	<tr>
		<td >{{t.name}}</td>
		<td >{{t.live_rationale.action}}</td>
		<td><para style="body">{{t.live_rationale.rationale}}</para></td>
		<td>{{t.live_rationale.date}}</td>
	</tr>
	{{endfor}}
</blockTable>

<name id="Title" value="Profit and loss by asset class and region"/>
<nextPage/>
<blockTable style="basic" colWidths="16.66%,16.66%,16.66%,16.66%,16.66%,16.66%">
	<tr>
		<td></td>

		{{for ac in attribution.get('lookup')[1]}}
		<td>{{ac}}</td>
		{{endfor}}

		<td>Total</td>
	</tr>

	{{for r in attribution.get('lookup')[0]}}
	<tr>
		<td>{{r}}</td>

		{{for ac in attribution.get('lookup')[1]}}
			{{negRedTd(attribution.get(r).get(ac), format='percent')}}
		{{endfor}}

		{{negRedTd(attribution.get(r).get('total'), format='percent')}}

	</tr>
	{{endfor}}

	<tr>
		<td>Total</td>

		{{for ac in attribution.get('lookup')[1]}}
			{{negRedTd(attribution.get(ac), format='percent')}}
		{{endfor}}

		{{negRedTd(attribution.get(ac)+attribution.get(r).get('total'), format='percent')}}
	</tr>
</blockTable>

<name id="Title" value="This month's returns by trade"/>
<nextPage/>
<para style="body">Code snippet shown below for embedding the chart:</para>
<codesnippet>
{{rml(
'''
&#60;drawing module="project.fundreport.charts.vchart" function="vchart"&#62;
	&#160;&#160;&#160;&#160;&#60;param name="chart.data">[&#123;&#123;attribution.get('data')[1]&#125;&#125;]&#60;/param&#62;
	&#160;&#160;&#160;&#160;&#60;param name="chart.categoryAxis.categoryNames">&#123;&#123;attribution.get('data')[0]&#125;&#125;&#60;/param&#62;
&#60;/drawing&#62;
'''
)}}
</codesnippet>

<drawing module="project.fundreport.charts.vchart" function="Vchart">
	<param name="title._text">Returns this month on active trades</param>
	<param name="yAxistitle._text">As % of AUM</param>
	<param name="chart.data">[{{attribution.get('data')[1]}}]</param>
	<param name="chart.categoryAxis.categoryNames">{{attribution.get('data')[0]}}</param>
</drawing>

<!--
==========

What follows demonstrates how to pull in pre-existing static
pages. We set a blank template and then use the
<includePdfPages> tag to pull in an existing PDF. The
leadingFrame attribute is necessary to prevent a blank page
appearing; if you omit this, you want to omit the preceding 
<nextPage/> as well.

==========
-->

<setNextTemplate name="blank"/>
<nextPage/>
<includePdfPages filename="{{RML_DIR}}/advert.pdf" leadingFrame="no"/>

</story>
</document>
